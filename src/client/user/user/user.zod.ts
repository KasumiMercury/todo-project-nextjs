/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * ToDoUser API
 * TodoアプリバックエンドのUserと認証に関するAPI
 * OpenAPI spec version: v0.0.1
 */
import { z as zod } from "zod";

/**
 * @summary ユーザー作成
 */
export const signUpJsonBodyUsernameMin = 0;

export const signUpJsonBodyUsernameMax = 255;

export const signUpJsonBodyUsernameRegExp = /[a-zA-Z0-9]+/;

export const signUpJsonBody = zod.object({
	username: zod
		.string()
		.min(signUpJsonBodyUsernameMin)
		.max(signUpJsonBodyUsernameMax)
		.regex(signUpJsonBodyUsernameRegExp),
	password: zod.string().min(1),
});

export const signUpJsonResponse = zod
	.object({
		username: zod.string(),
		userId: zod.uuid(),
		createdAt: zod.iso.datetime({}),
	})
	.describe("ユーザーの詳細な情報\nログインしているユーザー自身の情報");

/**
 * @summary ログイン
 */
export const signInJsonBodyUsernameMin = 0;

export const signInJsonBodyUsernameMax = 255;

export const signInJsonBodyUsernameRegExp = /[a-zA-Z0-9]+/;

export const signInJsonBody = zod.object({
	username: zod
		.string()
		.min(signInJsonBodyUsernameMin)
		.max(signInJsonBodyUsernameMax)
		.regex(signInJsonBodyUsernameRegExp),
	password: zod.string().min(1),
});

export const signInJsonResponse = zod.object({
	token: zod.string(),
});

/**
 * @summary 現在ログインしているユーザーの取得
 */
export const getIResponse = zod
	.object({
		username: zod.string(),
		userId: zod.uuid(),
		createdAt: zod.iso.datetime({}),
	})
	.describe("ユーザーの詳細な情報\nログインしているユーザー自身の情報");
