/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * Task Server API
 * Task Server API
 * OpenAPI spec version: 1.0.0
 */
import { faker } from "@faker-js/faker";

import { delay, HttpResponse, http } from "msw";

import type { ErrorResponse, Task } from ".././schemas";

export const getTaskGetAllTasksResponseMock = (): Task[] => [
  { id: "d85d6f2b-87ad-11f0-abaf-72e91ad152a0", title: "Sample Task 1" },
  { id: "68f8fade-87ee-11f0-9e3a-edcdb15c45d3", title: "Sample Task 2" },
];

export const getTaskGetAllTasksResponseMock200 = (): Task[] => [
  { id: "d85d6f2b-87ad-11f0-abaf-72e91ad152a0", title: "Sample Task 1" },
  { id: "68f8fade-87ee-11f0-9e3a-edcdb15c45d3", title: "Sample Task 2" },
];

export const getTaskGetAllTasksResponseMock401 = (): ErrorResponse => ({
  code: 401,
  message: "Unauthorized",
  details: "User ID not found in token",
});

export const getTaskGetAllTasksResponseMock500 = (): ErrorResponse => ({
  code: 500,
  message: "Internal server error",
  details: "database connection failed",
});

export const getTaskCreateTaskResponseMock = (
  overrideResponse: Partial<Task> = {},
): Task => ({
  id: faker.string.uuid(),
  title: faker.string.alpha({ length: { min: 10, max: 255 } }),
  ...overrideResponse,
});

export const getTaskCreateTaskResponseMock201 = (
  overrideResponse: Partial<Task> = {},
): Task => ({
  id: faker.string.uuid(),
  title: faker.string.alpha({ length: { min: 10, max: 255 } }),
  ...overrideResponse,
});

export const getTaskCreateTaskResponseMock400 = (): ErrorResponse => ({
  code: 400,
  message: "Bad request",
  details: "title field is required and cannot be empty",
});

export const getTaskCreateTaskResponseMock401 = (): ErrorResponse => ({
  code: 401,
  message: "Unauthorized",
  details: "User ID not found in token",
});

export const getTaskCreateTaskResponseMock500 = (): ErrorResponse => ({
  code: 500,
  message: "Internal server error",
  details: "database connection failed",
});

export const getTaskGetTaskResponseMock = (
  overrideResponse: Partial<Task> = {},
): Task => ({
  id: faker.string.uuid(),
  title: faker.string.alpha({ length: { min: 10, max: 255 } }),
  ...overrideResponse,
});

export const getTaskGetTaskResponseMock200 = (
  overrideResponse: Partial<Task> = {},
): Task => ({
  id: faker.string.uuid(),
  title: faker.string.alpha({ length: { min: 10, max: 255 } }),
  ...overrideResponse,
});

export const getTaskGetTaskResponseMock401 = (): ErrorResponse => ({
  code: 401,
  message: "Unauthorized",
  details: "User ID not found in token",
});

export const getTaskGetTaskResponseMock404 = (): ErrorResponse => ({
  code: 404,
  message: "Task not found",
});

export const getTaskGetTaskResponseMock500 = (): ErrorResponse => ({
  code: 500,
  message: "Internal server error",
  details: "database connection failed",
});

export const getTaskUpdateTaskResponseMock = (
  overrideResponse: Partial<Task> = {},
): Task => ({
  id: faker.string.uuid(),
  title: faker.string.alpha({ length: { min: 10, max: 255 } }),
  ...overrideResponse,
});

export const getTaskUpdateTaskResponseMock200 = (
  overrideResponse: Partial<Task> = {},
): Task => ({
  id: faker.string.uuid(),
  title: faker.string.alpha({ length: { min: 10, max: 255 } }),
  ...overrideResponse,
});

export const getTaskUpdateTaskResponseMock400 = (): ErrorResponse => ({
  code: 400,
  message: "Bad request",
  details: "task title cannot exceed 255 characters",
});

export const getTaskUpdateTaskResponseMock401 = (): ErrorResponse => ({
  code: 401,
  message: "Unauthorized",
  details: "User ID not found in token",
});

export const getTaskUpdateTaskResponseMock404 = (): ErrorResponse => ({
  code: 404,
  message: "Task not found",
});

export const getTaskUpdateTaskResponseMock500 = (): ErrorResponse => ({
  code: 500,
  message: "Internal server error",
  details: "database connection failed",
});

export const getTaskDeleteTaskResponseMock401 = (): ErrorResponse => ({
  code: 401,
  message: "Unauthorized",
  details: "User ID not found in token",
});

export const getTaskDeleteTaskResponseMock500 = (): ErrorResponse => ({
  code: 500,
  message: "Internal server error",
  details: "database connection failed",
});

export const getTaskGetAllTasksMockHandler = (
  overrideResponse?:
    | Task[]
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<Task[]> | Task[]),
) => {
  return http.get("*/tasks", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getTaskGetAllTasksResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getTaskGetAllTasksMockHandler200 = (
  overrideResponse?:
    | Task[]
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<Task[]> | Task[]),
) => {
  return http.get("*/tasks", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getTaskGetAllTasksResponseMock200(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getTaskGetAllTasksMockHandler401 = (
  overrideResponse?:
    | ErrorResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<ErrorResponse> | ErrorResponse),
) => {
  return http.get("*/tasks", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getTaskGetAllTasksResponseMock401(),
      ),
      { status: 401, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getTaskGetAllTasksMockHandler500 = (
  overrideResponse?:
    | ErrorResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<ErrorResponse> | ErrorResponse),
) => {
  return http.get("*/tasks", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getTaskGetAllTasksResponseMock500(),
      ),
      { status: 500, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getTaskCreateTaskMockHandler = (
  overrideResponse?:
    | Task
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<Task> | Task),
) => {
  return http.post("*/tasks", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getTaskCreateTaskResponseMock(),
      ),
      { status: 201, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getTaskCreateTaskMockHandler201 = (
  overrideResponse?:
    | Task
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<Task> | Task),
) => {
  return http.post("*/tasks", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getTaskCreateTaskResponseMock201(),
      ),
      { status: 201, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getTaskCreateTaskMockHandler400 = (
  overrideResponse?:
    | ErrorResponse
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<ErrorResponse> | ErrorResponse),
) => {
  return http.post("*/tasks", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getTaskCreateTaskResponseMock400(),
      ),
      { status: 400, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getTaskCreateTaskMockHandler401 = (
  overrideResponse?:
    | ErrorResponse
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<ErrorResponse> | ErrorResponse),
) => {
  return http.post("*/tasks", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getTaskCreateTaskResponseMock401(),
      ),
      { status: 401, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getTaskCreateTaskMockHandler500 = (
  overrideResponse?:
    | ErrorResponse
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<ErrorResponse> | ErrorResponse),
) => {
  return http.post("*/tasks", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getTaskCreateTaskResponseMock500(),
      ),
      { status: 500, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getTaskGetTaskMockHandler = (
  overrideResponse?:
    | Task
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<Task> | Task),
) => {
  return http.get("*/tasks/:taskId", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getTaskGetTaskResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getTaskGetTaskMockHandler200 = (
  overrideResponse?:
    | Task
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<Task> | Task),
) => {
  return http.get("*/tasks/:taskId", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getTaskGetTaskResponseMock200(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getTaskGetTaskMockHandler401 = (
  overrideResponse?:
    | ErrorResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<ErrorResponse> | ErrorResponse),
) => {
  return http.get("*/tasks/:taskId", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getTaskGetTaskResponseMock401(),
      ),
      { status: 401, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getTaskGetTaskMockHandler404 = (
  overrideResponse?:
    | ErrorResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<ErrorResponse> | ErrorResponse),
) => {
  return http.get("*/tasks/:taskId", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getTaskGetTaskResponseMock404(),
      ),
      { status: 404, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getTaskGetTaskMockHandler500 = (
  overrideResponse?:
    | ErrorResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<ErrorResponse> | ErrorResponse),
) => {
  return http.get("*/tasks/:taskId", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getTaskGetTaskResponseMock500(),
      ),
      { status: 500, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getTaskUpdateTaskMockHandler = (
  overrideResponse?:
    | Task
    | ((
        info: Parameters<Parameters<typeof http.put>[1]>[0],
      ) => Promise<Task> | Task),
) => {
  return http.put("*/tasks/:taskId", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getTaskUpdateTaskResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getTaskUpdateTaskMockHandler200 = (
  overrideResponse?:
    | Task
    | ((
        info: Parameters<Parameters<typeof http.put>[1]>[0],
      ) => Promise<Task> | Task),
) => {
  return http.put("*/tasks/:taskId", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getTaskUpdateTaskResponseMock200(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getTaskUpdateTaskMockHandler400 = (
  overrideResponse?:
    | ErrorResponse
    | ((
        info: Parameters<Parameters<typeof http.put>[1]>[0],
      ) => Promise<ErrorResponse> | ErrorResponse),
) => {
  return http.put("*/tasks/:taskId", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getTaskUpdateTaskResponseMock400(),
      ),
      { status: 400, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getTaskUpdateTaskMockHandler401 = (
  overrideResponse?:
    | ErrorResponse
    | ((
        info: Parameters<Parameters<typeof http.put>[1]>[0],
      ) => Promise<ErrorResponse> | ErrorResponse),
) => {
  return http.put("*/tasks/:taskId", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getTaskUpdateTaskResponseMock401(),
      ),
      { status: 401, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getTaskUpdateTaskMockHandler404 = (
  overrideResponse?:
    | ErrorResponse
    | ((
        info: Parameters<Parameters<typeof http.put>[1]>[0],
      ) => Promise<ErrorResponse> | ErrorResponse),
) => {
  return http.put("*/tasks/:taskId", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getTaskUpdateTaskResponseMock404(),
      ),
      { status: 404, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getTaskUpdateTaskMockHandler500 = (
  overrideResponse?:
    | ErrorResponse
    | ((
        info: Parameters<Parameters<typeof http.put>[1]>[0],
      ) => Promise<ErrorResponse> | ErrorResponse),
) => {
  return http.put("*/tasks/:taskId", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getTaskUpdateTaskResponseMock500(),
      ),
      { status: 500, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getTaskDeleteTaskMockHandler = (
  overrideResponse?:
    | null
    | ((
        info: Parameters<Parameters<typeof http.delete>[1]>[0],
      ) => Promise<null> | null),
) => {
  return http.delete("*/tasks/:taskId", async (info) => {
    await delay(1000);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 204 });
  });
};

export const getTaskDeleteTaskMockHandler204 = (
  overrideResponse?:
    | null
    | ((
        info: Parameters<Parameters<typeof http.delete>[1]>[0],
      ) => Promise<null> | null),
) => {
  return http.delete("*/tasks/:taskId", async (info) => {
    await delay(1000);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 204 });
  });
};

export const getTaskDeleteTaskMockHandler401 = (
  overrideResponse?:
    | ErrorResponse
    | ((
        info: Parameters<Parameters<typeof http.delete>[1]>[0],
      ) => Promise<ErrorResponse> | ErrorResponse),
) => {
  return http.delete("*/tasks/:taskId", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getTaskDeleteTaskResponseMock401(),
      ),
      { status: 401, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getTaskDeleteTaskMockHandler500 = (
  overrideResponse?:
    | ErrorResponse
    | ((
        info: Parameters<Parameters<typeof http.delete>[1]>[0],
      ) => Promise<ErrorResponse> | ErrorResponse),
) => {
  return http.delete("*/tasks/:taskId", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getTaskDeleteTaskResponseMock500(),
      ),
      { status: 500, headers: { "Content-Type": "application/json" } },
    );
  });
};
export const getTaskMock = () => [
  getTaskGetAllTasksMockHandler(),
  getTaskCreateTaskMockHandler(),
  getTaskGetTaskMockHandler(),
  getTaskUpdateTaskMockHandler(),
  getTaskDeleteTaskMockHandler(),
];
